Cross platform build tool for C/C++/Obj-C/C#/CUDA/opencl

||||| ||||| ||||| |   | ||||| |   |
| | | || ||   |   |  |  ||    ||  |
| | | |||||   |   |||   ||||| | | |
| | | || ||   |   |  |  ||    |  ||
| | | || || ||||| |   | ||||| |   |

Testers/comments/suggestions/feature requests welcome. Email me or make an issue.

maiken - mkn - master
======

1.1 Preamble

A minimal YAML based productivity tool.

1.2 License

BSD

1.3 Application overview

Languages supported            Compilers supported
    - C                        - gcc/clang
    - C++                      - MSVC (cl.exe)
    - Obj-C                    - nvcc
    - CUDA                     - MSVC#(csc.exe)
    - opencl                   - Intel C Compilers (icc/icpc)
    - C# (partially)


2.1 Basic project mkn.yaml files

2.1.1 Binary

name: exe_project
main: cpp.cpp


2.1.2 Library

name: lib_project
lang: cpp
src: ./src


2.2 YAML Schema

Values which allow property resolution are marked with ${aaa}

name: name 
version: version
scm: string                         # Appended to remote URLs for lookup if non concrete URL, used if concrete
parent: $directory                  # Inherit properties of project at directory, super (..) or sub directory advisable
property:                                     
  - aaa: AAA
    bbb: ${aaa}.BBB
inc: <directory> <directory> ${aaa}
src: <directory> <file> ${aaa}
path: <directory> ${aaa}            # extra library paths for linking, generally inadvisable unless project is in sub directory
lib: <library> ${aaa}               # prefixes/file types automatically deduced e.g. "lib: math" = libmath.a/so math.lib/dll
dep:
  - name: name                      # Used in URL lookup if ${scm} is missing
    version: version                # git branch and directory name of dependency under $name if no local tag
    scm: ${aaa}                     # Appended to remote URLs for lookup if non concrete URL, used if concrete
    local: ${aaa}                   # overrides local repository directory
main: <file>
arg: -DTHIS_PROFILE ${aaa}
if_arg:                             # optional arguments if case is true
    shared: ${aaa}                  # Add arguments to compilation if mode is shared
    static: ${aaa}                  # Add arguments to compilation if mode is static
    bin: ${aaa}                     # Add arguments to compilation if linking is binary
    lib: ${aaa}                     # Add arguments to compilation if linking is library
    bsd: ${aaa}
    bsd_bin: ${aaa}
    bsd_lib: ${aaa}
    bsd_shared: ${aaa}
    bsd_static: ${aaa}
    nix: ${aaa}
    nix_bin: ${aaa}
    nix_lib: ${aaa}
    nix_shared: ${aaa}
    nix_static: ${aaa}
    win: ${aaa}
    win_bin: ${aaa}
    win_lib: ${aaa}
    win_shared: ${aaa}
    win_static: ${aaa}
if_inc:                         # optional includes if case is true
    bsd: ${aaa}
    nix: ${aaa}
    win: ${aaa}
if_src:                         # optional sources if case is true
    bsd: <directory/file> ${aaa}
    nix: <directory/file> ${aaa}
    win: <directory/file> ${aaa}
if_lib:                         # optional libraries if case is true
    bsd: ${aaa}
    nix: ${aaa}
    win: ${aaa}
env:
  - name: name
    mode: prepend/append/replace
    value: value
profiles:
  - name: a
    inc: | 
        <directory>, false/no/0     # Don't include if dependency / private include
        <directory>, true/yes/1     # Include if dependency / public include
        <directory> <directory>     # Include both if dependency / public includes
    src: | 
        <directory>, false/no/0     # Don't find sources recursively
        <directory>, true/yes/1     # Find sources recursively
        <directory> <file>          # Find sources recursively in both
    dep:
      - name: name
        version: version
        local: .                    # Dependency on another profile in same project allowed, cycles detected
  - name: bbb
    parent: ${aaa}
  - name: bsd
    parent: a
  - name: nix
    parent: a
  - name: win
    parent: a

  - name: test
    self: ${OS} ${aaa}              # dependencies on current project profiles, cycles detected
    main: test.cpp
    install: ${aaa}                 # install binary or library to directory specified
                                    # library naming convention is libname_profile.a/so if linux, name_profile.lib if windows 


2.2.1 Caveats

2.2.1.1 Type deduction

If no main tag is found, library linking is assumed
If no lang tag is found, language is deduced from first main tag found in file
    langauge cannot be deduced if there are no main tags
If the project is a dependency, even if a main tag is present, library linking is assumed.


2.2.1.2 Mode 

The mode tag may have three values: static/shared/none
If the mode tag is found, it takes precedence for linking
If no mode tag is found, the -K and -S args will be used if found.
Linking cannot be guaranteed if no mode is used, but shared is generally default.
Unless a project requires a mode, it's advised to avoid using one. So it can be overridden with -K or -S.

If a application includes both static and shared dependencies, using the mode "none" is advised.


2.2.1.3 Entry points

All entry points must be referenced by at least one main tag, otherwise linking cannot be guaranteed.   
eg. 
profiles:
  - name: a
    main: a.cpp
  - name: b
    main: b.cpp
    
2.2.1.4 Compiler deduction

Compiler binares are expected to have their default names e.g. gcc/gcc.exe/cl.exe. This only applies to compilers and not archivers or linkers.


2.2.2 Properties

System properties:
    OS   - system OS, can be either bsd/nix/win
    HOME - bsd/nix/win(with msys/cygwin/etc) = ~/
           win cmd prompt = %HOMEDRIVE%/%HOMEPATH%
    DATETIME - DateTime when app launched format %Y-%m-%d-%H:%M:%S
    TIMESTAMP - Unix timestamp when app launched in seconds
    MKN_REPO - if settings.xml has [local][repo], it is that, otherwise
           bsd/nix/win(with msys/cygwin/etc) = ~/.maiken/repo
           win cmd prompt = %HOMEDRIVE%/%HOMEPATH%/maiken/repo

2.2.3 Profile Dependencies

Adding a profile as a dependency can do a number of things:
    Import addition public includes
    Add libraries while linking.
        This can happen when a dependency profile has sources so is linked into a library, or
        This can happen when a dependency has the "lib" tag
    Import addition library search directories with the "path" tag

2.2.4  Profile Inheritence

Using the "parent" tag, one profile may derive a number of values from the selected profile.
Generally all values are inherited, however even if this is the case, some values such as 
the "main" tag or others with only a single value are overridden in the case they exist in the active profile.

2.3 SCM

Git supported, SVN planned.


3 How to build maiken

3.1 Windows

Prerequisites:
    - git 2.0
    - Microsoft Visual Studio 2015 (Express)
    - Windows Dev Kit 10+ (http://msdn.microsoft.com/en-us/windows/desktop/ff851942.aspx)

Operations:
    - git clone http://www.github.com/Dekken/maiken.git maiken/master
    - cd maiken/master
    - make.bat - Enter directories for MSVS/WinKit when prompted

Testing:
    static : ./mkn clean build -dtKa -EHsc
    shared : ./mkn clean build -dtSa -EHsc

Example Windows settings can be found at: https://github.com/Dekken/maiken/wiki

3.2 Unix

Prerequisites:
    - git 2.0
    - gcc 5.0 (+) or equivalent

3.2.1 Debian

Operations:
    - git clone http://www.github.com/Dekken/maiken.git maiken/master
    - cd maiken/master
    - shared
        make nix
    - static
        make nix LDFLAGS="-pthread -static"
    WITH CLANG
        make nix CXX=clang++ 
    IF CLANG SECONDARY TO GCC
        LD_LIBRARY_PATH=<GCC_INSTALL>/lib64 make nix CXX=clang++ CXXFLAGS="-O2 -std=c++14 -Wall -I<GCC_INSTALL>/include/c++/5.2.0 -I<GCC_INSTALL>/include/c++/5.2.0/x86_64-unknown-linux-gnu" LDFLAGS="-L<GCC_INSTALL>/lib64" 

Testing:
    static : ./mkn clean build -dtKa "-Os -std=c++14 -Wall" -l -pthread
    shared : ./mkn clean build -dtSa "-Os -std=c++14 -Wall -fPIC"

3.2.1 Mac/OSX

Operations:
    - git clone http://www.github.com/Dekken/maiken.git maiken/master
    - cd maiken/master
    - make bsd CXX=clang++

Testing:
    static : ./mkn clean build -dtKa "-Os -std=c++14 -Wall" -l -pthread
    shared : ./mkn clean build -dtSa "-Os -std=c++14 -Wall -fPIC"

3.2.3 NetBSD

Operations:
    - git clone http://www.github.com/Dekken/maiken.git maiken/master
    - cd maiken/master
    - gmake bsd LDFLAGS="-pthread -lexecinfo"

Operations:
    static : ./mkn clean build -dtKa "-Os -std=c++14 -Wall" -l "-pthread -lexecinfo"
    shared : ./mkn clean build -dtSa "-Os -std=c++14 -Wall -fPIC" -l -lexecinfo

3.2.3 FreeBSD

Operations:
    - git clone http://www.github.com/Dekken/maiken.git maiken/master
    - cd maiken/master
    - gmake bsd CXXFLAGS="-std=c++14 -Os -Wall -D_GLIBCXX_USE_C99"

Operations:
    static : ./mkn clean build -dtKa "-Os -std=c++14 -Wall -D_GLIBCXX_USE_C99" -l -pthread
    shared : ./mkn clean build -dtSa "-Os -std=c++14 -Wall -fPIC -D_GLIBCXX_USE_C99" 


4.1 Logging - 

[missing] - turns on NONE logging to std out
KLOG=1    - turns on INFO logging to std out
KLOG=2    - turns on ERROR logging to std out
KLOG=3    - turns on DEBUG logging to std out

4.2 Activating Logging

4.2.1 Windows

SET KLOG=3
mkn clean build


4.2.2 Linux/Mac

KLOG=3 mkn clean build


4.3 settings.yaml

The settings file is the default global configuration for projects.

4.3.1 schema

inc: <directory> <directory>            # Optional, add include directories compiling 
path: <directory> <directory>           # Optional, add library path directories linking

file:                                   # Must include at least one item in list
  - type: c:cpp:cxx                     # Sources won't be compiled if the filetype is missing
    archiver: archiver                  # Archiver is not used for C#
    compiler: compiler
    linker:   linker    
env:                                    # Optional
  - name: name
    mode: prepend/append/replace
    value: value
local:
    repo: <directory>                   # Optional, missing assumed ${4.3.2}/repo
    bin:  <directory>                   # Optional, successfully linked binaries are moved to <directory>, overrides install
    lib:  <directory>                   # Optional, successfully linked libraries are moved to <directory>, overrides install
    debugger: <debug command>           # Optional debug command, overrides defaut, overriden by env var MKN_DBG string
remote:
    repo: URL_ROOTA URL_ROOTB           # Optional, overrides switch _MKN_REMOTE_REPO_ for incomplete SCM URL lookups

4.3.2 Location
    - Linux   -    ~/.maiken/settings.yaml
    - BSD/Mac -    ~/.maiken/settings.yaml
    - Windows -    IF CYGWIN/MSYS  ~/maiken/settings.yaml
                   IF CMD          %HOMEDRIVE%/%HOMEPATH%/maiken/settings.yaml


4.4 Language (HELP WANTED!)

English is the default language.
To activate another language run:
    mkn clean build -a MKN_LANG=fr


4.5 Timestamp logging

Upon succesful compilation of a project, source file modification timestamps are recoreded under ./bin/<profile>/.mkn/src_stamp, which are checked on the next build to see if recompilation is required.
Similarly, the aggregate of all non-hidden file modification timestamps are recorded under ./bin/<profile>/.mkn/inc_stamp, which are also checked on the next build to see if recompilation is required.
This can be enabled by compiling with the argument -D_MKN_TIMESTAMPS_=1
This is disabled for languages like C# when the source is not compiled.
The clean command deletes the timestamp files, and recompiles everything.

4.6 Debugging

If the environment variable "MKN_DBG" is set, it is used as the process string for debugging such that the format is: $MKN_DBG ./bin/<profile>/<binary> <args>
Otherwise, the settings.yaml variable "local->debugger" is checked, resulting in the same style of string
If neither are set the following rules apply
    Windows : cdb -o ./bin/<profile>/<binary> <args>
    Unix    : gdb ./bin/<profile>/<binary> <args>

4.7 Initialising scripts

After a missing dependency is retrieved for the first time, an initial setup script is run to put the repository in the desired state.
The type of file differs per OS, the rules are thus.
    Windows: ./mkn.bat
    Linux  : ./mkn.nix.sh, or if missing, ./mkn.sh
    BSD    : ./mkn.bsd.sh, or if missing, ./mkn.sh
This can be disabled by compiling with the argument "-D_MKN_REMOTE_EXEC_=0"

4.8 Default build command

If the first line of mkn.yaml starts with "#! "
The subsequent string is used as the default command if mkn is executed with zero arguments or commands (-C is allowed).


4.8 Dependency build rules

Using the argument -d / --dep
    The following rules apply
If soley numeric, must be greater than 0, used to limit which dependencies are built, 
    if 1, project immediate dependencies are built, if two, includes dependencies of dependencies.
If non-numeric, CSV apply, with the value equating to the yaml root node "name", only those found, plus the current project are built.
Project profiles may be specified with square brackets, e.g. "-d project[profile]"
If no profile is chosen, all profiles from that project which would normally be active with an argumentless "-d" will be active.
Also, if non numeric, special characters include
    "+", ignores current project. If only value builds all but current project.


Example mkn.yaml

--------------
#! clean build -Kl -pthread

name: example
version: version
main: cpp.cpp
--------------

5.1 Usage

5.1.1 Commands

Available commands
    - build    - Compiles all supported files to the profile binary (./bin/profile) directory, and creates library/executable depending
    - clean    - deletes all files from the profile directory recursively.
    - compile  - Compiles all supported file to the profile binary directory
    - link     - Creates a library/executable from found compiled files
    - profiles - displays $(PWD)/mkn.xml profiles to std::out - then exits (--version takes precendence)
    - init     - Create a minimal project file ${PWD}/mkn.xml, exits, error if one exists
    - inc      - Print include directories to std out
    - src      - Print found source files to std out [allows -d].
    - pack     - Copy binary files & library files into bin/$profile/pack
    - run      - Starts the application automatically linking libraries for dependencies on dynamic libraries, supports -a and -p/-D
    - dbg      - Same as run but uses debugger - see 4.6

5.1.2 Arguments

Available arguments:
    -a --args $a          - Adds $arg to the compile command if compile/build, passes arguments to application if run
    -C --directory $d     - Execute on directory $d rather than current directory 
    -d --dependencies     - See 4.8
    -e --env $e           - CSV key=value environment variables override format -P "k1=v1,k2=v2" , can be used with run/dbg, backslash escaps , and =
    -h --help             - Print help
    -j --jargs $j         - Takes JSON in the form of {"c": "-DC_ARG1 -DC_ARG2", "cpp": "-DCXX_ARG1 -DCXX_ARG2"} passing file-type specific args to compiler
    -l --linker $t        - Adds $t to linking of root project build
    -p --profile $p       - Activate profile p
    -P --property $p      - CSV key=value properties override format -P "k1=v1,k2=v2" , backslash escaps , and =
    -R --dry-run $f       - Do not compile/link, but print out compiler process strings, do not run etc
    -s --scm-status       - Display SCM status of project, allows -d
    -u --scm-update       - Update project from SCM when permitted, allows -d
    -U --scm-force-update - Force update project from SCM, allows -d
    -t --threads $n       - Consume $num threads while compiling source files where $n > 0, If $n is missing optimal resolution attempted.
    -v --version          - Displays the current maiken version number
    -x --settings $f      - Sets settings.yaml in use to $f. Directory missing, $(4.3.1) attempted
    -K --static           - Links projects without mode as static
    -S --shared           - Links projects without mode as shared


5.1.3 Examples

mkn clean build -dtu                 - update/clean/compile with optimal threads/link everything
mkn clean compile link -d -t -u      - update/clean/compile with optimal threads/link everything
mkn clean build -dtKa -DARG          - clean/compile with optimal threads passing -DARG/link everything statically
mkn clean build -dtKa "-DARG -DARG1" - clean/compile with optimal threads passing -DARG and -DARG1/link everything statically
mkn clean build -d 1 -t 2 -u         - update/clean/compile with two threads/link project and immediate dependencies
mkn -ds                              - Display "${scm} status" for everything


6. Switches
 
Key             _MKN_REP_NAME_DOT_ 
Type            bool
Default         1
Description     split project name by period
                    if true
                        name: pro.ject
                        version: version
                    Will expect folder
                        ${LOCAL_REPO}/pro/ject/version
                    otherwise
                        ${LOCAL_REPO}/pro.ject/version

Key             _MKN_REP_VERS_DOT_ 
Type            bool
Default         0
Description     split project version by period. 
                    if true
                        name: project
                        version: ver.si.on
                    Will expect folder
                        ${LOCAL_REPO}/project/ver/si/on
                    otherwise
                        ${LOCAL_REPO}/project/ver.si.on

Key             _MKN_TIMESTAMPS_ 
Type            bool
Default         0
Description     Logs timestamps of source/includes to skip files with no changes.

Key             _MKN_REMOTE_EXEC_ 
Type            bool
Default         1
Description     Execute mkn.(bat/sh etc) in directory of missing dependencies when retrieved from SCM

Key             _MKN_REMOTE_REPO_
Type            string
Default         "http://github.com/mkn/"
Description     Space separated list of URLs to use as roots for non-complete SCM repositories.
                    i.e.
                    scm: http://github.com/mkn/mkn.kul.git  # ignored
                    scm: git@github.com:mkn/mkn.kul.git     # ignored
                    scm: mkn.kul.git                        # becomes 
                                                                for(const std::string& s: split(_MKN_REMOTE_REPO_, " ") 
                                                                    attempt(s + "mkn.kul.git")
                                                                if all attempts fail, throw

Key             _MKN_DISABLE_SCM_
Type            flag
Default         0
Description     disables all SCM

Key             _MKN_DISABLE_SVN_
Type            flag
Default         0
Description     disables SVN if it was supported

Key             _MKN_DISABLE_GIT_
Type            flag
Default         0
Description     disables git
